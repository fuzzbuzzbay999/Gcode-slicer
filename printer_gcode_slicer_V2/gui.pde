/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void button1_click1(GButton source, GEvent event) { //_CODE_:Select:795443:
println("loading image");
  selectInput("select Image:", "ImageSelected", file);;

} //_CODE_:Select:795443:

public void button1_click2(GButton source, GEvent event) { //_CODE_:Redraw:289112:
println("draw button pressed");
  drawImages();
} //_CODE_:Redraw:289112:

public void selected_image(GDropList source, GEvent event) { //_CODE_:ImageDropdown:326246:
// println("GDropdown >> GEvent." + event + " @ " + millis());
createPrevImg(source.getSelectedText());
updateSliders(source.getSelectedIndex());
  println("image dropdown selectd");
 cleanUI();
 println("current selected text");
 println(source.getSelectedText());
 println("current selected index");
 println(source.getSelectedIndex());

// println(source.getSelectedIndex());
} //_CODE_:ImageDropdown:326246:

public void moveImageX(GSlider source, GEvent event) { //_CODE_:xPosSlider:257871:
 //println("xPos - GSlider >> GEvent." + event + " @ " + millis());
  moveImage(ImageDropdown.getSelectedIndex(),source.getValueF(),yPosSlider.getValueF());
} //_CODE_:xPosSlider:257871:

public void moveImageY(GSlider source, GEvent event) { //_CODE_:yPosSlider:727466:
  moveImage(ImageDropdown.getSelectedIndex(),xPosSlider.getValueF(),source.getValueF());
  
} //_CODE_:yPosSlider:727466:

public void isProportional(GCheckbox source, GEvent event) { //_CODE_:proportionalScaling:894705:
  //println("proportionalScaling - GCheckbox >> GEvent." + event + " @ " + millis());
  if(event.getType()=="SELECTED"){
   isProportional = true;
  }else if(event.getType()=="DESELECTED"){
    isProportional = false;
  }
  print(isProportional);
} //_CODE_:proportionalScaling:894705:

public void ChangeWidth(GTextField source, GEvent event) { //_CODE_:WidthBox:559940:
scaleImageX(ImageDropdown.getSelectedIndex(),float(source.getText()));
  //println(float(source.getText()),event);
} //_CODE_:WidthBox:559940:

public void ChangeHeight(GTextField source, GEvent event) { //_CODE_:HeightBox:279222:
  //println(float(source.getText()),event);
  scaleImageY(ImageDropdown.getSelectedIndex(),float(source.getText()));
} //_CODE_:HeightBox:279222:

public void Export(GButton source, GEvent event) { //_CODE_:ExportBtn:689316:
 selectOutput("slected where to save the png to be converted","export",file);
} //_CODE_:ExportBtn:689316:

public void TraceFile(GButton source, GEvent event) { //_CODE_:TraceBtn:812878:
selectInput("select Image to be traced","trace",file);
} //_CODE_:TraceBtn:812878:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  Select = new GButton(this, 36, 24, 80, 30);
  Select.setText("Select");
  Select.addEventHandler(this, "button1_click1");
  Redraw = new GButton(this, 35, 84, 80, 30);
  Redraw.setText("redraw images");
  Redraw.addEventHandler(this, "button1_click2");
  ImageDropdown = new GDropList(this, 21, 121, 361, 248, 3, 10);
  ImageDropdown.setItems(loadStrings("list_326246"), 1);
  ImageDropdown.addEventHandler(this, "selected_image");
  xPosSlider = new GSlider(this, 25, 236, 100, 40, 10.0);
  xPosSlider.setShowValue(true);
  xPosSlider.setLimits(0.5, 0.0, 1.0);
  xPosSlider.setNumberFormat(G4P.DECIMAL, 2);
  xPosSlider.setOpaque(true);
  xPosSlider.addEventHandler(this, "moveImageX");
  yPosSlider = new GSlider(this, 187, 207, 100, 40, 10.0);
  yPosSlider.setShowValue(true);
  yPosSlider.setRotation(PI/2, GControlMode.CORNER);
  yPosSlider.setLimits(0.5, 0.0, 1.0);
  yPosSlider.setNumberFormat(G4P.DECIMAL, 2);
  yPosSlider.setOpaque(true);
  yPosSlider.addEventHandler(this, "moveImageY");
  xPosLabel = new GLabel(this, 28, 207, 80, 20);
  xPosLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  xPosLabel.setText("X position");
  xPosLabel.setOpaque(false);
  YposLabel = new GLabel(this, 130, 189, 80, 20);
  YposLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  YposLabel.setText("Y postion");
  YposLabel.setOpaque(false);
  scaleLabel = new GLabel(this, 28, 293, 80, 20);
  scaleLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  scaleLabel.setText("size in mm");
  scaleLabel.setOpaque(false);
  proportionalScaling = new GCheckbox(this, 159, 336, 120, 20);
  proportionalScaling.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  proportionalScaling.setText("Proportional Scalling");
  proportionalScaling.setOpaque(false);
  proportionalScaling.addEventHandler(this, "isProportional");
  proportionalScaling.setSelected(true);
  WidthBox = new GTextField(this, 30, 325, 120, 30, G4P.SCROLLBARS_NONE);
  WidthBox.setPromptText("Enter the Width in mm");
  WidthBox.setOpaque(true);
  WidthBox.addEventHandler(this, "ChangeWidth");
  HeightBox = new GTextField(this, 29, 365, 120, 30, G4P.SCROLLBARS_NONE);
  HeightBox.setPromptText("Enter the Height in mm");
  HeightBox.setOpaque(true);
  HeightBox.addEventHandler(this, "ChangeHeight");
  ExportBtn = new GButton(this, 130, 27, 80, 30);
  ExportBtn.setText("export the bed image");
  ExportBtn.addEventHandler(this, "Export");
  TraceBtn = new GButton(this, 129, 82, 80, 30);
  TraceBtn.setText("Select a File to trace");
  TraceBtn.addEventHandler(this, "TraceFile");
  label1 = new GLabel(this, 234, 11, 174, 30);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("to get started click 'Select'");
  label1.setOpaque(false);
  label2 = new GLabel(this, 235, 44, 221, 26);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Use the drop down to select the image you want to edit. ");
  label2.setOpaque(false);
  ScaleMoveLabel = new GLabel(this, 220, 214, 251, 39);
  ScaleMoveLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  ScaleMoveLabel.setText("use the X Y sliders to move and the size X Y boxes to change the scale");
  ScaleMoveLabel.setOpaque(false);
  RedrawLabel = new GLabel(this, 220, 263, 236, 21);
  RedrawLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  RedrawLabel.setText("Click 'redraw Images' to update the preview");
  RedrawLabel.setOpaque(false);
  label3 = new GLabel(this, 232, 71, 232, 20);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Click Export to save the print area,");
  label3.setOpaque(false);
  label4 = new GLabel(this, 230, 93, 239, 27);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("click 'select a file to trace' to trace a file. without editing it");
  label4.setOpaque(false);
}

// Variable declarations 
// autogenerated do not edit
GButton Select; 
GButton Redraw; 
GDropList ImageDropdown; 
GSlider xPosSlider; 
GSlider yPosSlider; 
GLabel xPosLabel; 
GLabel YposLabel; 
GLabel scaleLabel; 
GCheckbox proportionalScaling; 
GTextField WidthBox; 
GTextField HeightBox; 
GButton ExportBtn; 
GButton TraceBtn; 
GLabel label1; 
GLabel label2; 
GLabel ScaleMoveLabel; 
GLabel RedrawLabel; 
GLabel label3; 
GLabel label4; 
